package db

import (
	"context"
	"donation-mgmt/src/data_access"
	"errors"
	"fmt"
	"sync"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

var ErrUnitOfWorkReleased = errors.New("unit of work was released")

type UnitOfWork struct {
	txRequested bool
	released    bool

	initOnce *sync.Once

	conn *pgxpool.Conn
	tx   pgx.Tx

	querier data_access.Querier
}

func NewUnitOfWork() *UnitOfWork {
	return &UnitOfWork{
		txRequested: false,
		released:    false,

		initOnce: &sync.Once{},
	}
}

func (uow *UnitOfWork) UseTransaction() {
	uow.txRequested = true
}

func (uow *UnitOfWork) WillUseTransaction() bool {
	return uow.txRequested
}

func (uow *UnitOfWork) GetQuerier(ctx context.Context) (data_access.Querier, error) {
	if uow.released {
		return nil, ErrUnitOfWorkReleased
	}

	var err error
	uow.initOnce.Do(func() {
		uow.conn, err = DBPool().Acquire(ctx)
		if err != nil {
			return
		}

		if uow.txRequested {
			uow.tx, err = uow.conn.Begin(ctx)
			if err != nil {
				return
			}
			// We create a new instance of the querier object generated by sqlc
			uow.querier = data_access.New(uow.tx)
		} else {
			// We create a new instance of the querier object generated by sqlc
			uow.querier = data_access.New(uow.conn)
		}
	})

	if err != nil {
		return nil, err
	}

	if uow.querier == nil {
		return nil, fmt.Errorf("error initializing querier")
	}

	return uow.querier, nil
}

// Finalize commits or rolls back the transaction (if necessary) and releases the database connection.
func (uow *UnitOfWork) Finalize(ctx context.Context, isSuccess bool) error {
	if uow.released {
		return nil
	}

	// UnitOfWork is lazy-loaded. If not used, we don't have anything to do.
	if uow.conn == nil {
		return nil
	}

	defer func() {
		uow.conn.Release()
		uow.released = true
	}()

	if uow.tx != nil {
		// Just in case...
		defer func(tx pgx.Tx, ctx context.Context) {
			_ = tx.Rollback(ctx)
		}(uow.tx, ctx)

		if isSuccess {
			err := uow.tx.Commit(ctx)
			if err != nil {
				return err
			}
		} else {
			err := uow.tx.Rollback(ctx)
			if err != nil {
				return err
			}
		}
	}

	return nil
}
