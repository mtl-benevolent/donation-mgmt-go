// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../tmp/prisma-client"
}

datasource db {
  provider = "cockroachdb"
  url      = env("PG_MIGRATION_DB")
}

model Organization {
  id BigInt @id @default(sequence())
  name String
  slug String @unique

  created_at DateTime @db.Timestamptz() @default(now())
  archived_at DateTime? @db.Timestamptz()

  donations Donation[]

  user_roles ScopedUserRole[]
  
  @@map("organizations")
}

model Role {
  id BigInt @id @default(sequence())
  name String @unique

  capabilities String[]

  created_at DateTime @db.Timestamptz() @default(now())
  archived_at DateTime? @db.Timestamptz()

  scoped_user_roles ScopedUserRole[]
  global_user_roles GlobalUserRole[]

  @@map("roles")
}

model ScopedUserRole {
  id BigInt @id @default(sequence())

  subject String

  role Role @relation(fields: [role_id], references: [id])
  role_id BigInt

  organization Organization @relation(fields: [organization_id], references: [id])
  organization_id BigInt

  created_at DateTime @db.Timestamptz() @default(now())

  @@map("scoped_user_roles")
  @@unique([subject, organization_id])
}

model GlobalUserRole {
  id BigInt @id @default(sequence())

  subject String @unique

  role Role @relation(fields: [role_id], references: [id])
  role_id BigInt

  created_at DateTime @db.Timestamptz() @default(now())

  @@map("global_user_roles")
}

enum Enviroment {
  SANDBOX
  LIVE
}

enum DonationType {
  ONE_TIME
  RECURRENT
}

enum DonationSource {
  PAYPAL
  CHEQUE
  DIRECT_DEPOSIT
  STOCKS
  OTHER
}

model Donation {
  id BigInt @id @default(sequence())
  slug String @unique

  organization Organization @relation(fields: [organization_id], references: [id])
  organization_id BigInt

  external_id String?
  environment Enviroment

  fiscal_year Int @db.Int2
  reason String?
  type DonationType
  source DonationSource

  donor_firstname String?
  donor_lastname_or_orgName String
  donor_email String?
  donor_address Json?

  emit_receipt Boolean
  send_by_email Boolean

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime? @db.Timestamptz()
  archived_at DateTime? @db.Timestamptz()

  payments DonationPayment[]
  comments DonationComment[]

  @@map("donations")
  @@index([organization_id, environment, fiscal_year])
  @@index([organization_id, environment, fiscal_year, external_id, source])
  @@unique([organization_id, environment, slug])
}

model DonationPayment {
  id BigInt @id @default(sequence())
  external_id String?
  
  donation Donation @relation(fields: [donation_id], references: [id])
  donation_id BigInt

  amount_in_cents BigInt
  receipt_amount_in_cents BigInt

  received_at DateTime @db.Timestamptz()
  created_at DateTime @db.Timestamptz() @default(now())
  archived_at DateTime? @db.Timestamptz()

  @@map("donation_payments")
}

model DonationComment {
  id BigInt @id @default(sequence())
  
  comment String
  author String

  created_at DateTime @db.Timestamptz() @default(now())
  archived_at DateTime? @db.Timestamptz()

  donation Donation @relation(fields: [donation_id], references: [id])
  donation_id BigInt

  @@map("donation_comments")
}
